# -*- coding: utf-8 -*-
"""Streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LNVkXWAP1Yuw9Xu6b-43DwivK_SI6hnz

Уставновка библиотеки:
"""


import io
import streamlit as st
import pandas as pd
import numpy as np
import sklearn.preprocessing
import sklearn.feature_extraction
import seaborn as sns
import matplotlib.pyplot as plt
plt.style.use('ggplot')
import warnings
warnings.filterwarnings('ignore')
import scipy.stats

# Загрузка данных
def load_data():
    # Используйте полный путь к вашему файлу
    data = pd.read_csv(r'C:\Users\Сергей\Desktop\6 class csv.csv', encoding='utf-8')
    data.drop_duplicates(inplace=True)
    data = data.reset_index()
    return data

# Функция для отображения описания полей данных
def show_data_description(data):
    st.subheader("Описание полей данных:")
    st.write("Этот раздел содержит описание каждого поля в исходных данных.")
    st.write("Пожалуйста, ознакомьтесь с ним перед анализом данных.")
    data.rename(columns={'Temperature (K)': 'Температура_К', 
                   'Luminosity(L/Lo)': 'Свечение_л_ло', 
                   'Radius(R/Ro)': 'Радиус_р_ро',
                   'Absolute magnitude(Mv)': 'Абсолют_магнитизм_мв',
                   'Star type': 'Тип_звезды',
                   'Star color': 'Цвет_звезды',
                   'Spectral Class': 'Спектральный_класс'}, 
          inplace=True) 
    st.write(data)

# Функция для анализа и предобработки данных
def data_analysis(data):
    st.subheader("Анализ и предобработка данных:")
    st.write("Этот раздел содержит анализ и предобработку данных перед их использованием в анализе и визуализации.")

    # Поиск нулевых значений
    st.write("### Нулевые значения:")
    st.write(data.isnull().sum())

    # Количество уникальных значений для любого столбца
    st.write("### Количество уникальных значений для каждого столбца:")
    st.write(data.nunique())

    # Описательная статистика данных
    st.write("### Описательная статистика данных:")
    st.write(data.describe())

    # Количество всех категорий в виде графиков
    st.write("### Количество всех категорий в виде графиков:")
    categorical_columns = data.select_dtypes(include=['object']).columns.tolist()
    for column in categorical_columns:
        plt.figure(figsize=(10, 6))
        sns.countplot(x=column, data=data)
        plt.title(f"Распределение значений по категориям в столбце '{column}'")
        plt.xticks(rotation=45)
        plt.xlabel(column)
        plt.ylabel("Количество")
        st.pyplot(plt)

# Функция для визуализации распределения выбранных категорий и выделения выбросов
def data_visualization(data):
    st.subheader("Визуализация:")
    st.write("Этот раздел содержит визуализацию данных для анализа распределения и выявления выбросов.")

    # Выбор категорий для визуализации
    format = []
    for i in data.columns:
        if data[i].dtypes == 'float64' or data[i].dtypes == 'int64':
            format.append(i)

    corr_matrix = data.loc[:, format].corr()
    print(corr_matrix)

    plt.figure(figsize=(10, 5), dpi= 80)
    sns.heatmap(corr_matrix, annot=True)

    # Выбираем категориальные колонки
    categorical_columns = [column for column in data.columns if data[column].dtype == 'object'] 
    # Выбираем цифровые столбцы в список
    numerical_columns = [column for column in data.columns if data[column].dtype != 'object']

    print(numerical_columns)

    for column in categorical_columns:
        print(f'Признак: {column}, кол-во уникальных значений: {data_analysis[column].nunique()}')
        print('Уникальные значения: ')
        print(data[column].value_counts(), '\n')

# Функция для обучения и оценки классификационной модели
def train_and_evaluate_model(data):
    st.subheader("Обучение и оценка результатов прогнозирования:")
    st.write("Этот раздел содержит обучение классификационной модели и оценку ее результатов.")

    print("Color Count\n-----------------------------\n", 
      data['Цвет_звезды'].value_counts())
    plt.figure(figsize = (13, 6)) # это пустой квадрат размером 13х6

    print("\n\n")

    plt.figure(figsize = (13, 6))
    color = pd.DataFrame(data['Цвет_звезды'].value_counts().sort_values(ascending=False)) # маленький датасет для формирования цветов
    ax = sns.barplot(x = color.index, y = 'Цвет_звезды' , data = color)
    plt.title("Визуализация цветов звезды")
    plt.ylabel('Цвет_звезды')
    ax = ax.set_xticklabels(ax.get_xticklabels(), rotation = 90)    

def t1(data):
    print("Class Count\n-------------------\n", 
        data['Спектральный_класс'].value_counts())

    spectral_class = pd.DataFrame(data['Спектральный_класс'].value_counts().sort_values(ascending=False))

    print("\n\n")

    plt.figure(figsize=(10, 6))
    ax = sns.barplot(x = spectral_class.index, y = 'Спектральный_класс', 
                    data = spectral_class)
    plt.title("Визуализация Спектральный_класс")
    plt.ylabel('Спектральный_класс')
    plt.show()

    print('\n\n\n\n\n')

    plt.figure(figsize=(10, 6))
    plt.pie(data['Спектральный_класс'].value_counts(), labels=data['Спектральный_класс'].value_counts())
    plt.show()

    plt.figure(figsize=(10, 6))
    sns.countplot(data['Тип_звезды'])
    plt.show()

    print('\n\n\n\n\n')

    plt.figure(figsize=(10, 6))
    plt.pie(data['Тип_звезды'].value_counts(), labels=data['Тип_звезды'].value_counts())
    plt.show()
 

def t2(data):
    numerical_columns = [column for column in data.columns if data[column].dtype != 'object']
    for item in numerical_columns:
        print(f'Визуализация ящиковой диаграммы {item}')
        sns.boxplot(x=item, data=data)
        plt.title(item)
        plt.show()
        print('\n\n\n')

        plt.scatter(x=data[item], y=data.index)
        plt.title(item)
        plt.show()
        print('\n\n\n')
# Заголовок
st.title("Анализ данных")

# Загрузка данных
data = load_data()

# Вывод данных
st.write("Демонстрация данных:")
st.write(data)

# Описание полей данных
show_data_description(data)
data_analysis(data)
# Анализ и предобработка данных
data_analysis(data)

# Визуализация
data_visualization(data)

# Обучение и оценка результатов прогнозирования
train_and_evaluate_model(data)
t1(data)
t2(data)
